// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LabelTag is an object representing the database table.
type LabelTag struct {
	LabelID int64  `boil:"label_id" json:"label_id" toml:"label_id" yaml:"label_id"`
	TagUID  string `boil:"tag_uid" json:"tag_uid" toml:"tag_uid" yaml:"tag_uid"`

	R *labelTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L labelTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LabelTagColumns = struct {
	LabelID string
	TagUID  string
}{
	LabelID: "label_id",
	TagUID:  "tag_uid",
}

var LabelTagTableColumns = struct {
	LabelID string
	TagUID  string
}{
	LabelID: "label_tag.label_id",
	TagUID:  "label_tag.tag_uid",
}

// Generated where

var LabelTagWhere = struct {
	LabelID whereHelperint64
	TagUID  whereHelperstring
}{
	LabelID: whereHelperint64{field: "\"label_tag\".\"label_id\""},
	TagUID:  whereHelperstring{field: "\"label_tag\".\"tag_uid\""},
}

// LabelTagRels is where relationship names are stored.
var LabelTagRels = struct {
	Label string
}{
	Label: "Label",
}

// labelTagR is where relationships are stored.
type labelTagR struct {
	Label *Label `boil:"Label" json:"Label" toml:"Label" yaml:"Label"`
}

// NewStruct creates a new relationship struct
func (*labelTagR) NewStruct() *labelTagR {
	return &labelTagR{}
}

// labelTagL is where Load methods for each relationship are stored.
type labelTagL struct{}

var (
	labelTagAllColumns            = []string{"label_id", "tag_uid"}
	labelTagColumnsWithoutDefault = []string{"label_id", "tag_uid"}
	labelTagColumnsWithDefault    = []string{}
	labelTagPrimaryKeyColumns     = []string{"tag_uid", "label_id"}
)

type (
	// LabelTagSlice is an alias for a slice of pointers to LabelTag.
	// This should almost always be used instead of []LabelTag.
	LabelTagSlice []*LabelTag

	labelTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	labelTagType                 = reflect.TypeOf(&LabelTag{})
	labelTagMapping              = queries.MakeStructMapping(labelTagType)
	labelTagPrimaryKeyMapping, _ = queries.BindMapping(labelTagType, labelTagMapping, labelTagPrimaryKeyColumns)
	labelTagInsertCacheMut       sync.RWMutex
	labelTagInsertCache          = make(map[string]insertCache)
	labelTagUpdateCacheMut       sync.RWMutex
	labelTagUpdateCache          = make(map[string]updateCache)
	labelTagUpsertCacheMut       sync.RWMutex
	labelTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single labelTag record from the query.
func (q labelTagQuery) One(exec boil.Executor) (*LabelTag, error) {
	o := &LabelTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for label_tag")
	}

	return o, nil
}

// All returns all LabelTag records from the query.
func (q labelTagQuery) All(exec boil.Executor) (LabelTagSlice, error) {
	var o []*LabelTag

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LabelTag slice")
	}

	return o, nil
}

// Count returns the count of all LabelTag records in the query.
func (q labelTagQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count label_tag rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q labelTagQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if label_tag exists")
	}

	return count > 0, nil
}

// Label pointed to by the foreign key.
func (o *LabelTag) Label(mods ...qm.QueryMod) labelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LabelID),
	}

	queryMods = append(queryMods, mods...)

	query := Labels(queryMods...)
	queries.SetFrom(query.Query, "\"labels\"")

	return query
}

// LoadLabel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (labelTagL) LoadLabel(e boil.Executor, singular bool, maybeLabelTag interface{}, mods queries.Applicator) error {
	var slice []*LabelTag
	var object *LabelTag

	if singular {
		object = maybeLabelTag.(*LabelTag)
	} else {
		slice = *maybeLabelTag.(*[]*LabelTag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &labelTagR{}
		}
		args = append(args, object.LabelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &labelTagR{}
			}

			for _, a := range args {
				if a == obj.LabelID {
					continue Outer
				}
			}

			args = append(args, obj.LabelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`labels`),
		qm.WhereIn(`labels.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Label")
	}

	var resultSlice []*Label
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Label")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for labels")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Label = foreign
		if foreign.R == nil {
			foreign.R = &labelR{}
		}
		foreign.R.LabelTags = append(foreign.R.LabelTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LabelID == foreign.ID {
				local.R.Label = foreign
				if foreign.R == nil {
					foreign.R = &labelR{}
				}
				foreign.R.LabelTags = append(foreign.R.LabelTags, local)
				break
			}
		}
	}

	return nil
}

// SetLabel of the labelTag to the related item.
// Sets o.R.Label to related.
// Adds o to related.R.LabelTags.
func (o *LabelTag) SetLabel(exec boil.Executor, insert bool, related *Label) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"label_tag\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"label_id"}),
		strmangle.WhereClause("\"", "\"", 2, labelTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TagUID, o.LabelID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LabelID = related.ID
	if o.R == nil {
		o.R = &labelTagR{
			Label: related,
		}
	} else {
		o.R.Label = related
	}

	if related.R == nil {
		related.R = &labelR{
			LabelTags: LabelTagSlice{o},
		}
	} else {
		related.R.LabelTags = append(related.R.LabelTags, o)
	}

	return nil
}

// LabelTags retrieves all the records using an executor.
func LabelTags(mods ...qm.QueryMod) labelTagQuery {
	mods = append(mods, qm.From("\"label_tag\""))
	return labelTagQuery{NewQuery(mods...)}
}

// FindLabelTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLabelTag(exec boil.Executor, tagUID string, labelID int64, selectCols ...string) (*LabelTag, error) {
	labelTagObj := &LabelTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"label_tag\" where \"tag_uid\"=$1 AND \"label_id\"=$2", sel,
	)

	q := queries.Raw(query, tagUID, labelID)

	err := q.Bind(nil, exec, labelTagObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from label_tag")
	}

	return labelTagObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LabelTag) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no label_tag provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(labelTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	labelTagInsertCacheMut.RLock()
	cache, cached := labelTagInsertCache[key]
	labelTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			labelTagAllColumns,
			labelTagColumnsWithDefault,
			labelTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(labelTagType, labelTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(labelTagType, labelTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"label_tag\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"label_tag\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into label_tag")
	}

	if !cached {
		labelTagInsertCacheMut.Lock()
		labelTagInsertCache[key] = cache
		labelTagInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the LabelTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LabelTag) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	labelTagUpdateCacheMut.RLock()
	cache, cached := labelTagUpdateCache[key]
	labelTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			labelTagAllColumns,
			labelTagPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update label_tag, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"label_tag\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, labelTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(labelTagType, labelTagMapping, append(wl, labelTagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update label_tag row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for label_tag")
	}

	if !cached {
		labelTagUpdateCacheMut.Lock()
		labelTagUpdateCache[key] = cache
		labelTagUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q labelTagQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for label_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for label_tag")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LabelTagSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), labelTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"label_tag\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, labelTagPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in labelTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all labelTag")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LabelTag) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no label_tag provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(labelTagColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	labelTagUpsertCacheMut.RLock()
	cache, cached := labelTagUpsertCache[key]
	labelTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			labelTagAllColumns,
			labelTagColumnsWithDefault,
			labelTagColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			labelTagAllColumns,
			labelTagPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert label_tag, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(labelTagPrimaryKeyColumns))
			copy(conflict, labelTagPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"label_tag\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(labelTagType, labelTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(labelTagType, labelTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert label_tag")
	}

	if !cached {
		labelTagUpsertCacheMut.Lock()
		labelTagUpsertCache[key] = cache
		labelTagUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single LabelTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LabelTag) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LabelTag provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), labelTagPrimaryKeyMapping)
	sql := "DELETE FROM \"label_tag\" WHERE \"tag_uid\"=$1 AND \"label_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from label_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for label_tag")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q labelTagQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no labelTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from label_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for label_tag")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LabelTagSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), labelTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"label_tag\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, labelTagPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from labelTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for label_tag")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LabelTag) Reload(exec boil.Executor) error {
	ret, err := FindLabelTag(exec, o.TagUID, o.LabelID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LabelTagSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LabelTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), labelTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"label_tag\".* FROM \"label_tag\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, labelTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LabelTagSlice")
	}

	*o = slice

	return nil
}

// LabelTagExists checks if the LabelTag row exists.
func LabelTagExists(exec boil.Executor, tagUID string, labelID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"label_tag\" where \"tag_uid\"=$1 AND \"label_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tagUID, labelID)
	}
	row := exec.QueryRow(sql, tagUID, labelID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if label_tag exists")
	}

	return exists, nil
}
