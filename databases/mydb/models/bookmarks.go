// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Bookmark is an object representing the database table.
type Bookmark struct {
	ID         int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name       null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	UserID     int64       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	SourceUID  string      `boil:"source_uid" json:"source_uid" toml:"source_uid" yaml:"source_uid"`
	SourceType string      `boil:"source_type" json:"source_type" toml:"source_type" yaml:"source_type"`
	Data       null.JSON   `boil:"data" json:"data,omitempty" toml:"data" yaml:"data,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *bookmarkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookmarkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookmarkColumns = struct {
	ID         string
	Name       string
	UserID     string
	SourceUID  string
	SourceType string
	Data       string
	CreatedAt  string
}{
	ID:         "id",
	Name:       "name",
	UserID:     "user_id",
	SourceUID:  "source_uid",
	SourceType: "source_type",
	Data:       "data",
	CreatedAt:  "created_at",
}

var BookmarkTableColumns = struct {
	ID         string
	Name       string
	UserID     string
	SourceUID  string
	SourceType string
	Data       string
	CreatedAt  string
}{
	ID:         "bookmarks.id",
	Name:       "bookmarks.name",
	UserID:     "bookmarks.user_id",
	SourceUID:  "bookmarks.source_uid",
	SourceType: "bookmarks.source_type",
	Data:       "bookmarks.data",
	CreatedAt:  "bookmarks.created_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BookmarkWhere = struct {
	ID         whereHelperint64
	Name       whereHelpernull_String
	UserID     whereHelperint64
	SourceUID  whereHelperstring
	SourceType whereHelperstring
	Data       whereHelpernull_JSON
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperint64{field: "\"bookmarks\".\"id\""},
	Name:       whereHelpernull_String{field: "\"bookmarks\".\"name\""},
	UserID:     whereHelperint64{field: "\"bookmarks\".\"user_id\""},
	SourceUID:  whereHelperstring{field: "\"bookmarks\".\"source_uid\""},
	SourceType: whereHelperstring{field: "\"bookmarks\".\"source_type\""},
	Data:       whereHelpernull_JSON{field: "\"bookmarks\".\"data\""},
	CreatedAt:  whereHelpertime_Time{field: "\"bookmarks\".\"created_at\""},
}

// BookmarkRels is where relationship names are stored.
var BookmarkRels = struct {
	User            string
	BookmarkFolders string
}{
	User:            "User",
	BookmarkFolders: "BookmarkFolders",
}

// bookmarkR is where relationships are stored.
type bookmarkR struct {
	User            *User               `boil:"User" json:"User" toml:"User" yaml:"User"`
	BookmarkFolders BookmarkFolderSlice `boil:"BookmarkFolders" json:"BookmarkFolders" toml:"BookmarkFolders" yaml:"BookmarkFolders"`
}

// NewStruct creates a new relationship struct
func (*bookmarkR) NewStruct() *bookmarkR {
	return &bookmarkR{}
}

// bookmarkL is where Load methods for each relationship are stored.
type bookmarkL struct{}

var (
	bookmarkAllColumns            = []string{"id", "name", "user_id", "source_uid", "source_type", "data", "created_at"}
	bookmarkColumnsWithoutDefault = []string{"name", "user_id", "source_uid", "source_type", "data"}
	bookmarkColumnsWithDefault    = []string{"id", "created_at"}
	bookmarkPrimaryKeyColumns     = []string{"id"}
)

type (
	// BookmarkSlice is an alias for a slice of pointers to Bookmark.
	// This should almost always be used instead of []Bookmark.
	BookmarkSlice []*Bookmark

	bookmarkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookmarkType                 = reflect.TypeOf(&Bookmark{})
	bookmarkMapping              = queries.MakeStructMapping(bookmarkType)
	bookmarkPrimaryKeyMapping, _ = queries.BindMapping(bookmarkType, bookmarkMapping, bookmarkPrimaryKeyColumns)
	bookmarkInsertCacheMut       sync.RWMutex
	bookmarkInsertCache          = make(map[string]insertCache)
	bookmarkUpdateCacheMut       sync.RWMutex
	bookmarkUpdateCache          = make(map[string]updateCache)
	bookmarkUpsertCacheMut       sync.RWMutex
	bookmarkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single bookmark record from the query.
func (q bookmarkQuery) One(exec boil.Executor) (*Bookmark, error) {
	o := &Bookmark{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bookmarks")
	}

	return o, nil
}

// All returns all Bookmark records from the query.
func (q bookmarkQuery) All(exec boil.Executor) (BookmarkSlice, error) {
	var o []*Bookmark

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Bookmark slice")
	}

	return o, nil
}

// Count returns the count of all Bookmark records in the query.
func (q bookmarkQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bookmarks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bookmarkQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bookmarks exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Bookmark) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// BookmarkFolders retrieves all the bookmark_folder's BookmarkFolders with an executor.
func (o *Bookmark) BookmarkFolders(mods ...qm.QueryMod) bookmarkFolderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bookmark_folder\".\"bookmark_id\"=?", o.ID),
	)

	query := BookmarkFolders(queryMods...)
	queries.SetFrom(query.Query, "\"bookmark_folder\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"bookmark_folder\".*"})
	}

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bookmarkL) LoadUser(e boil.Executor, singular bool, maybeBookmark interface{}, mods queries.Applicator) error {
	var slice []*Bookmark
	var object *Bookmark

	if singular {
		object = maybeBookmark.(*Bookmark)
	} else {
		slice = *maybeBookmark.(*[]*Bookmark)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bookmarkR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookmarkR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Bookmarks = append(foreign.R.Bookmarks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Bookmarks = append(foreign.R.Bookmarks, local)
				break
			}
		}
	}

	return nil
}

// LoadBookmarkFolders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bookmarkL) LoadBookmarkFolders(e boil.Executor, singular bool, maybeBookmark interface{}, mods queries.Applicator) error {
	var slice []*Bookmark
	var object *Bookmark

	if singular {
		object = maybeBookmark.(*Bookmark)
	} else {
		slice = *maybeBookmark.(*[]*Bookmark)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bookmarkR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookmarkR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bookmark_folder`),
		qm.WhereIn(`bookmark_folder.bookmark_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bookmark_folder")
	}

	var resultSlice []*BookmarkFolder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bookmark_folder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bookmark_folder")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bookmark_folder")
	}

	if singular {
		object.R.BookmarkFolders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookmarkFolderR{}
			}
			foreign.R.Bookmark = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BookmarkID {
				local.R.BookmarkFolders = append(local.R.BookmarkFolders, foreign)
				if foreign.R == nil {
					foreign.R = &bookmarkFolderR{}
				}
				foreign.R.Bookmark = local
				break
			}
		}
	}

	return nil
}

// SetUser of the bookmark to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Bookmarks.
func (o *Bookmark) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bookmarks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, bookmarkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &bookmarkR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Bookmarks: BookmarkSlice{o},
		}
	} else {
		related.R.Bookmarks = append(related.R.Bookmarks, o)
	}

	return nil
}

// AddBookmarkFolders adds the given related objects to the existing relationships
// of the bookmark, optionally inserting them as new records.
// Appends related to o.R.BookmarkFolders.
// Sets related.R.Bookmark appropriately.
func (o *Bookmark) AddBookmarkFolders(exec boil.Executor, insert bool, related ...*BookmarkFolder) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BookmarkID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bookmark_folder\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"bookmark_id"}),
				strmangle.WhereClause("\"", "\"", 2, bookmarkFolderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.FolderID, rel.BookmarkID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BookmarkID = o.ID
		}
	}

	if o.R == nil {
		o.R = &bookmarkR{
			BookmarkFolders: related,
		}
	} else {
		o.R.BookmarkFolders = append(o.R.BookmarkFolders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookmarkFolderR{
				Bookmark: o,
			}
		} else {
			rel.R.Bookmark = o
		}
	}
	return nil
}

// Bookmarks retrieves all the records using an executor.
func Bookmarks(mods ...qm.QueryMod) bookmarkQuery {
	mods = append(mods, qm.From("\"bookmarks\""))
	return bookmarkQuery{NewQuery(mods...)}
}

// FindBookmark retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBookmark(exec boil.Executor, iD int64, selectCols ...string) (*Bookmark, error) {
	bookmarkObj := &Bookmark{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bookmarks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, bookmarkObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bookmarks")
	}

	return bookmarkObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Bookmark) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bookmarks provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(bookmarkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookmarkInsertCacheMut.RLock()
	cache, cached := bookmarkInsertCache[key]
	bookmarkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookmarkAllColumns,
			bookmarkColumnsWithDefault,
			bookmarkColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bookmarkType, bookmarkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookmarkType, bookmarkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bookmarks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bookmarks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bookmarks")
	}

	if !cached {
		bookmarkInsertCacheMut.Lock()
		bookmarkInsertCache[key] = cache
		bookmarkInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Bookmark.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Bookmark) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	bookmarkUpdateCacheMut.RLock()
	cache, cached := bookmarkUpdateCache[key]
	bookmarkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookmarkAllColumns,
			bookmarkPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bookmarks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bookmarks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bookmarkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookmarkType, bookmarkMapping, append(wl, bookmarkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bookmarks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bookmarks")
	}

	if !cached {
		bookmarkUpdateCacheMut.Lock()
		bookmarkUpdateCache[key] = cache
		bookmarkUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q bookmarkQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bookmarks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bookmarks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookmarkSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookmarkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bookmarks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bookmarkPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bookmark slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bookmark")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Bookmark) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bookmarks provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(bookmarkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookmarkUpsertCacheMut.RLock()
	cache, cached := bookmarkUpsertCache[key]
	bookmarkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bookmarkAllColumns,
			bookmarkColumnsWithDefault,
			bookmarkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bookmarkAllColumns,
			bookmarkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bookmarks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bookmarkPrimaryKeyColumns))
			copy(conflict, bookmarkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bookmarks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bookmarkType, bookmarkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookmarkType, bookmarkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bookmarks")
	}

	if !cached {
		bookmarkUpsertCacheMut.Lock()
		bookmarkUpsertCache[key] = cache
		bookmarkUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Bookmark record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Bookmark) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Bookmark provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookmarkPrimaryKeyMapping)
	sql := "DELETE FROM \"bookmarks\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bookmarks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bookmarks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bookmarkQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bookmarkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bookmarks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bookmarks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookmarkSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookmarkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bookmarks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookmarkPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bookmark slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bookmarks")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Bookmark) Reload(exec boil.Executor) error {
	ret, err := FindBookmark(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookmarkSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookmarkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookmarkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bookmarks\".* FROM \"bookmarks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookmarkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BookmarkSlice")
	}

	*o = slice

	return nil
}

// BookmarkExists checks if the Bookmark row exists.
func BookmarkExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bookmarks\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bookmarks exists")
	}

	return exists, nil
}
