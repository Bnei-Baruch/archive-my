// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Note is an object representing the database table.
type Note struct {
	ID         int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID     int64       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Content    null.String `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`
	SubjectUID string      `boil:"subject_uid" json:"subject_uid" toml:"subject_uid" yaml:"subject_uid"`
	Properties null.JSON   `boil:"properties" json:"properties,omitempty" toml:"properties" yaml:"properties,omitempty"`
	Language   string      `boil:"language" json:"language" toml:"language" yaml:"language"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *noteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L noteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NoteColumns = struct {
	ID         string
	UserID     string
	Content    string
	SubjectUID string
	Properties string
	Language   string
	CreatedAt  string
}{
	ID:         "id",
	UserID:     "user_id",
	Content:    "content",
	SubjectUID: "subject_uid",
	Properties: "properties",
	Language:   "language",
	CreatedAt:  "created_at",
}

var NoteTableColumns = struct {
	ID         string
	UserID     string
	Content    string
	SubjectUID string
	Properties string
	Language   string
	CreatedAt  string
}{
	ID:         "notes.id",
	UserID:     "notes.user_id",
	Content:    "notes.content",
	SubjectUID: "notes.subject_uid",
	Properties: "notes.properties",
	Language:   "notes.language",
	CreatedAt:  "notes.created_at",
}

// Generated where

var NoteWhere = struct {
	ID         whereHelperint64
	UserID     whereHelperint64
	Content    whereHelpernull_String
	SubjectUID whereHelperstring
	Properties whereHelpernull_JSON
	Language   whereHelperstring
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperint64{field: "\"notes\".\"id\""},
	UserID:     whereHelperint64{field: "\"notes\".\"user_id\""},
	Content:    whereHelpernull_String{field: "\"notes\".\"content\""},
	SubjectUID: whereHelperstring{field: "\"notes\".\"subject_uid\""},
	Properties: whereHelpernull_JSON{field: "\"notes\".\"properties\""},
	Language:   whereHelperstring{field: "\"notes\".\"language\""},
	CreatedAt:  whereHelpertime_Time{field: "\"notes\".\"created_at\""},
}

// NoteRels is where relationship names are stored.
var NoteRels = struct {
	User string
}{
	User: "User",
}

// noteR is where relationships are stored.
type noteR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*noteR) NewStruct() *noteR {
	return &noteR{}
}

// noteL is where Load methods for each relationship are stored.
type noteL struct{}

var (
	noteAllColumns            = []string{"id", "user_id", "content", "subject_uid", "properties", "language", "created_at"}
	noteColumnsWithoutDefault = []string{"user_id", "subject_uid", "language"}
	noteColumnsWithDefault    = []string{"id", "content", "properties", "created_at"}
	notePrimaryKeyColumns     = []string{"id"}
	noteGeneratedColumns      = []string{}
)

type (
	// NoteSlice is an alias for a slice of pointers to Note.
	// This should almost always be used instead of []Note.
	NoteSlice []*Note

	noteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	noteType                 = reflect.TypeOf(&Note{})
	noteMapping              = queries.MakeStructMapping(noteType)
	notePrimaryKeyMapping, _ = queries.BindMapping(noteType, noteMapping, notePrimaryKeyColumns)
	noteInsertCacheMut       sync.RWMutex
	noteInsertCache          = make(map[string]insertCache)
	noteUpdateCacheMut       sync.RWMutex
	noteUpdateCache          = make(map[string]updateCache)
	noteUpsertCacheMut       sync.RWMutex
	noteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single note record from the query.
func (q noteQuery) One(exec boil.Executor) (*Note, error) {
	o := &Note{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for notes")
	}

	return o, nil
}

// All returns all Note records from the query.
func (q noteQuery) All(exec boil.Executor) (NoteSlice, error) {
	var o []*Note

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Note slice")
	}

	return o, nil
}

// Count returns the count of all Note records in the query.
func (q noteQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count notes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q noteQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if notes exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Note) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (noteL) LoadUser(e boil.Executor, singular bool, maybeNote interface{}, mods queries.Applicator) error {
	var slice []*Note
	var object *Note

	if singular {
		object = maybeNote.(*Note)
	} else {
		slice = *maybeNote.(*[]*Note)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &noteR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &noteR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Notes = append(foreign.R.Notes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Notes = append(foreign.R.Notes, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the note to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Notes.
func (o *Note) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, notePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &noteR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Notes: NoteSlice{o},
		}
	} else {
		related.R.Notes = append(related.R.Notes, o)
	}

	return nil
}

// Notes retrieves all the records using an executor.
func Notes(mods ...qm.QueryMod) noteQuery {
	mods = append(mods, qm.From("\"notes\""))
	return noteQuery{NewQuery(mods...)}
}

// FindNote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNote(exec boil.Executor, iD int64, selectCols ...string) (*Note, error) {
	noteObj := &Note{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"notes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, noteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from notes")
	}

	return noteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Note) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notes provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(noteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	noteInsertCacheMut.RLock()
	cache, cached := noteInsertCache[key]
	noteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			noteAllColumns,
			noteColumnsWithDefault,
			noteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(noteType, noteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(noteType, noteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"notes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"notes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into notes")
	}

	if !cached {
		noteInsertCacheMut.Lock()
		noteInsertCache[key] = cache
		noteInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Note.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Note) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	noteUpdateCacheMut.RLock()
	cache, cached := noteUpdateCache[key]
	noteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			noteAllColumns,
			notePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update notes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"notes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, notePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(noteType, noteMapping, append(wl, notePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update notes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for notes")
	}

	if !cached {
		noteUpdateCacheMut.Lock()
		noteUpdateCache[key] = cache
		noteUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q noteQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for notes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for notes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NoteSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"notes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, notePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in note slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all note")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Note) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notes provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(noteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	noteUpsertCacheMut.RLock()
	cache, cached := noteUpsertCache[key]
	noteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			noteAllColumns,
			noteColumnsWithDefault,
			noteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			noteAllColumns,
			notePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert notes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(notePrimaryKeyColumns))
			copy(conflict, notePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"notes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(noteType, noteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(noteType, noteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert notes")
	}

	if !cached {
		noteUpsertCacheMut.Lock()
		noteUpsertCache[key] = cache
		noteUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Note record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Note) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Note provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), notePrimaryKeyMapping)
	sql := "DELETE FROM \"notes\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from notes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for notes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q noteQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no noteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NoteSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"notes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from note slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notes")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Note) Reload(exec boil.Executor) error {
	ret, err := FindNote(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NoteSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"notes\".* FROM \"notes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NoteSlice")
	}

	*o = slice

	return nil
}

// NoteExists checks if the Note row exists.
func NoteExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"notes\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if notes exists")
	}

	return exists, nil
}
